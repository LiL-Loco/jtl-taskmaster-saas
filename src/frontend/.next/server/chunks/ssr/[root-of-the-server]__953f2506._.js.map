{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":["file:///E:/jtl-taskmaster-saas/src/frontend/src/services/api.ts"],"sourcesContent":["// services/api.ts\r\nimport axios, { AxiosError } from 'axios'\r\nimport { ApiResponse, Job, Task, AgentInfo, AgentStats } from '@/types/api'\r\nimport { Agent } from 'http'\r\n\r\nconst api = axios.create({\r\n  baseURL: process.env.NEXT_PUBLIC_API_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n})\r\n\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token')\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`\r\n  }\r\n  return config\r\n})\r\n\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error: AxiosError) => {\r\n    if (error.response?.status === 401) {\r\n      // Handle token expiration\r\n      localStorage.removeItem('token')\r\n      window.location.href = '/login'\r\n    }\r\n    return Promise.reject(error)\r\n  }\r\n)\r\n\r\nexport const jobsApi = {\r\n  getAll: () => \r\n    api.get<ApiResponse<Job[]>>('/jobs').then(res => res.data.data),\r\n  \r\n  getById: (id: string) => \r\n    api.get<ApiResponse<Job>>('/jobs/').then(res => res.data.data),\r\n  \r\n  create: (job: Partial<Job>) => \r\n    api.post<ApiResponse<Job>>('/jobs', job).then(res => res.data.data),\r\n  \r\n  update: (id: string, job: Partial<Job>) => \r\n    api.put<ApiResponse<Job>>('/jobs/', job).then(res => res.data.data),\r\n  \r\n  delete: (id: string) => \r\n    api.delete('/jobs/'),\r\n  \r\n  start: (id: string) => \r\n    api.post('/jobs//start'),\r\n}\r\n\r\nexport const tasksApi = {\r\n  updateStatus: (jobId: string, taskId: string, status: string) =>\r\n    api.put('/jobs//tasks//status', { status }),\r\n}\r\n\r\nexport const agentsApi = {\r\n  getAll: () => \r\n    api.get<ApiResponse<Agent[]>>('/agents').then(res => res.data.data),\r\n  \r\n  getStatus: (id: string) => \r\n    api.get<ApiResponse<AgentStats>>('/agents//status').then(res => res.data.data),\r\n}\r\n\r\nexport const authApi = {\r\n  login: (credentials: { email: string; password: string }) =>\r\n    api.post<ApiResponse<{ token: string }>>('/auth/login', credentials)\r\n      .then(res => res.data.data),\r\n  \r\n  register: (userData: { email: string; password: string; name: string }) =>\r\n    api.post<ApiResponse<{ token: string }>>('/auth/register', userData)\r\n      .then(res => res.data.data),\r\n  \r\n  refreshToken: () =>\r\n    api.post<ApiResponse<{ token: string }>>('/auth/refresh-token')\r\n      .then(res => res.data.data),\r\n}"],"names":[],"mappings":"AAAA,kBAAkB;;;;;;;AAClB;;AAIA,MAAM,MAAM,qIAAA,CAAA,UAAK,CAAC,MAAM,CAAC;IACvB,OAAO;IACP,SAAS;QACP,gBAAgB;IAClB;AACF;AAEA,IAAI,YAAY,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;IAC5B,MAAM,QAAQ,aAAa,OAAO,CAAC;IACnC,IAAI,OAAO;QACT,OAAO,OAAO,CAAC,aAAa,GAAG,CAAC,OAAO,EAAE,OAAO;IAClD;IACA,OAAO;AACT;AAEA,IAAI,YAAY,CAAC,QAAQ,CAAC,GAAG,CAC3B,CAAC,WAAa,UACd,CAAC;IACC,IAAI,MAAM,QAAQ,EAAE,WAAW,KAAK;QAClC,0BAA0B;QAC1B,aAAa,UAAU,CAAC;QACxB,OAAO,QAAQ,CAAC,IAAI,GAAG;IACzB;IACA,OAAO,QAAQ,MAAM,CAAC;AACxB;AAGK,MAAM,UAAU;IACrB,QAAQ,IACN,IAAI,GAAG,CAAqB,SAAS,IAAI,CAAC,CAAA,MAAO,IAAI,IAAI,CAAC,IAAI;IAEhE,SAAS,CAAC,KACR,IAAI,GAAG,CAAmB,UAAU,IAAI,CAAC,CAAA,MAAO,IAAI,IAAI,CAAC,IAAI;IAE/D,QAAQ,CAAC,MACP,IAAI,IAAI,CAAmB,SAAS,KAAK,IAAI,CAAC,CAAA,MAAO,IAAI,IAAI,CAAC,IAAI;IAEpE,QAAQ,CAAC,IAAY,MACnB,IAAI,GAAG,CAAmB,UAAU,KAAK,IAAI,CAAC,CAAA,MAAO,IAAI,IAAI,CAAC,IAAI;IAEpE,QAAQ,CAAC,KACP,IAAI,MAAM,CAAC;IAEb,OAAO,CAAC,KACN,IAAI,IAAI,CAAC;AACb;AAEO,MAAM,WAAW;IACtB,cAAc,CAAC,OAAe,QAAgB,SAC5C,IAAI,GAAG,CAAC,wBAAwB;YAAE;QAAO;AAC7C;AAEO,MAAM,YAAY;IACvB,QAAQ,IACN,IAAI,GAAG,CAAuB,WAAW,IAAI,CAAC,CAAA,MAAO,IAAI,IAAI,CAAC,IAAI;IAEpE,WAAW,CAAC,KACV,IAAI,GAAG,CAA0B,mBAAmB,IAAI,CAAC,CAAA,MAAO,IAAI,IAAI,CAAC,IAAI;AACjF;AAEO,MAAM,UAAU;IACrB,OAAO,CAAC,cACN,IAAI,IAAI,CAAiC,eAAe,aACrD,IAAI,CAAC,CAAA,MAAO,IAAI,IAAI,CAAC,IAAI;IAE9B,UAAU,CAAC,WACT,IAAI,IAAI,CAAiC,kBAAkB,UACxD,IAAI,CAAC,CAAA,MAAO,IAAI,IAAI,CAAC,IAAI;IAE9B,cAAc,IACZ,IAAI,IAAI,CAAiC,uBACtC,IAAI,CAAC,CAAA,MAAO,IAAI,IAAI,CAAC,IAAI;AAChC","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///E:/jtl-taskmaster-saas/src/frontend/src/hooks/useJobs.ts"],"sourcesContent":["'use client'\r\n\r\n// src/hooks/useJobs.ts\r\nimport { useQuery } from '@tanstack/react-query'\r\nimport { jobsApi } from '@/services/api'\r\n\r\nexport function useJobs() {\r\n  return useQuery({\r\n    queryKey: ['jobs'],\r\n    queryFn: () => jobsApi.getAll(),\r\n  })\r\n}\r\n"],"names":[],"mappings":";;;AAEA,uBAAuB;AACvB;AACA;AAJA;;;AAMO,SAAS;IACd,OAAO,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;QACd,UAAU;YAAC;SAAO;QAClB,SAAS,IAAM,sHAAA,CAAA,UAAO,CAAC,MAAM;IAC/B;AACF","debugId":null}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":["file:///E:/jtl-taskmaster-saas/src/frontend/src/components/JobsList.tsx"],"sourcesContent":["'use client'\r\n\r\nimport { useJobs } from '@/hooks/useJobs'\r\n\r\nexport default function JobsList() {\r\n  const { data: jobs, isLoading, error } = useJobs()\r\n\r\n  if (isLoading) return <div>Loading...</div>\r\n  if (error) return <div>Error: {error.message}</div>\r\n  \r\n  return (\r\n    <div>\r\n      <h2>Jobs List</h2>\r\n      {jobs && jobs.length > 0 ? (\r\n        <ul>\r\n          {jobs.map((job) => (\r\n            <li key={job.id}>{job.name || 'Unnamed Job'}</li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No jobs found</p>\r\n      )}\r\n    </div>\r\n  )\r\n}"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS;IACtB,MAAM,EAAE,MAAM,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,GAAG,CAAA,GAAA,uHAAA,CAAA,UAAO,AAAD;IAE/C,IAAI,WAAW,qBAAO,8OAAC;kBAAI;;;;;;IAC3B,IAAI,OAAO,qBAAO,8OAAC;;YAAI;YAAQ,MAAM,OAAO;;;;;;;IAE5C,qBACE,8OAAC;;0BACC,8OAAC;0BAAG;;;;;;YACH,QAAQ,KAAK,MAAM,GAAG,kBACrB,8OAAC;0BACE,KAAK,GAAG,CAAC,CAAC,oBACT,8OAAC;kCAAiB,IAAI,IAAI,IAAI;uBAArB,IAAI,EAAE;;;;;;;;;qCAInB,8OAAC;0BAAE;;;;;;;;;;;;AAIX","debugId":null}}]
}