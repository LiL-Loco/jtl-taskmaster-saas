{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///E:/jtl-taskmaster-saas/src/frontend/src/services/signalr.ts"],"sourcesContent":["// services/signalr.ts\r\nimport * as signalR from '@microsoft/signalr'\r\nimport { JobStatus, TaskStatus } from '@/types/api'\r\n\r\nexport class SignalRService {\r\n  private hubConnection: signalR.HubConnection\r\n  private statusCallbacks: ((jobId: string, status: JobStatus) => void)[] = []\r\n  private taskStatusCallbacks: ((jobId: string, taskId: string, status: TaskStatus) => void)[] = []\r\n\r\n  constructor() {\r\n    this.hubConnection = new signalR.HubConnectionBuilder()\r\n      .withUrl(`${process.env.NEXT_PUBLIC_API_URL}/hubs/jobs`)\r\n      .withAutomaticReconnect()\r\n      .build()\r\n\r\n    this.hubConnection.on('JobStatusUpdated', (jobId: string, status: JobStatus) => {\r\n      this.statusCallbacks.forEach(callback => callback(jobId, status))\r\n    })\r\n\r\n    this.hubConnection.on('TaskStatusUpdated', \r\n      (jobId: string, taskId: string, status: TaskStatus) => {\r\n        this.taskStatusCallbacks.forEach(callback => \r\n          callback(jobId, taskId, status))\r\n    })\r\n  }\r\n\r\n  async start() {\r\n    try {\r\n      await this.hubConnection.start()\r\n      console.log('SignalR Connected')\r\n    } catch (err) {\r\n      console.error('SignalR Connection Error: ', err)\r\n      setTimeout(() => this.start(), 5000)\r\n    }\r\n  }\r\n\r\n  onJobStatusUpdated(callback: (jobId: string, status: JobStatus) => void) {\r\n    this.statusCallbacks.push(callback)\r\n    return () => {\r\n      this.statusCallbacks = this.statusCallbacks.filter(cb => cb !== callback)\r\n    }\r\n  }\r\n\r\n  onTaskStatusUpdated(\r\n    callback: (jobId: string, taskId: string, status: TaskStatus) => void\r\n  ) {\r\n    this.taskStatusCallbacks.push(callback)\r\n    return () => {\r\n      this.taskStatusCallbacks = this.taskStatusCallbacks.filter(cb => cb !== callback)\r\n    }\r\n  }\r\n\r\n  async stop() {\r\n    await this.hubConnection.stop()\r\n  }\r\n}\r\n\r\nexport const signalRService = new SignalRService()"],"names":[],"mappings":"AAAA,sBAAsB;;;;;AAWJ;AAVlB;;AAGO,MAAM;IACH,cAAoC;IACpC,kBAAkE,EAAE,CAAA;IACpE,sBAAuF,EAAE,CAAA;IAEjG,aAAc;QACZ,IAAI,CAAC,aAAa,GAAG,IAAI,gLAAA,CAAA,uBAA4B,GAClD,OAAO,CAAC,iEAAmC,UAAU,CAAC,EACtD,sBAAsB,GACtB,KAAK;QAER,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,oBAAoB,CAAC,OAAe;YACxD,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAA,WAAY,SAAS,OAAO;QAC3D;QAEA,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,qBACpB,CAAC,OAAe,QAAgB;YAC9B,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAA,WAC/B,SAAS,OAAO,QAAQ;QAC9B;IACF;IAEA,MAAM,QAAQ;QACZ,IAAI;YACF,MAAM,IAAI,CAAC,aAAa,CAAC,KAAK;YAC9B,QAAQ,GAAG,CAAC;QACd,EAAE,OAAO,KAAK;YACZ,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,WAAW,IAAM,IAAI,CAAC,KAAK,IAAI;QACjC;IACF;IAEA,mBAAmB,QAAoD,EAAE;QACvE,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;QAC1B,OAAO;YACL,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAA,KAAM,OAAO;QAClE;IACF;IAEA,oBACE,QAAqE,EACrE;QACA,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;QAC9B,OAAO;YACL,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAA,KAAM,OAAO;QAC1E;IACF;IAEA,MAAM,OAAO;QACX,MAAM,IAAI,CAAC,aAAa,CAAC,IAAI;IAC/B;AACF;AAEO,MAAM,iBAAiB,IAAI","debugId":null}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file:///E:/jtl-taskmaster-saas/src/frontend/src/hooks/useSignalR.ts"],"sourcesContent":["// hooks/useSignalR.ts\r\nimport { useEffect } from 'react'\r\nimport { useQueryClient } from '@tanstack/react-query'\r\nimport { signalRService } from '@/services/signalr'\r\nimport { Job, JobStatus, TaskStatus } from '@/types/api'\r\n\r\nexport function useSignalR() {\r\n  const queryClient = useQueryClient()\r\n\r\n  useEffect(() => {\r\n    signalRService.start()\r\n\r\n    const jobStatusUnsubscribe = signalRService.onJobStatusUpdated(\r\n      (jobId: string, status: JobStatus) => {\r\n        // Update job status in cache\r\n        queryClient.setQueryData(['jobs'], (oldData: Job[] | undefined) => {\r\n          if (!oldData) return oldData\r\n          return oldData.map(job => \r\n            job.id === jobId ? { ...job, status } : job\r\n          )\r\n        })\r\n\r\n        // Update single job cache if exists\r\n        queryClient.setQueryData(['jobs', jobId], (oldData: Job | undefined) => {\r\n          if (!oldData) return oldData\r\n          return { ...oldData, status }\r\n        })\r\n      }\r\n    )\r\n\r\n    const taskStatusUnsubscribe = signalRService.onTaskStatusUpdated(\r\n      (jobId: string, taskId: string, status: TaskStatus) => {\r\n        // Update job cache to reflect task status\r\n        queryClient.setQueryData(['jobs', jobId], (oldData: Job | undefined) => {\r\n          if (!oldData) return oldData\r\n          return {\r\n            ...oldData,\r\n            tasks: oldData.tasks.map(task =>\r\n              task.id === taskId ? { ...task, status } : task\r\n            )\r\n          }\r\n        })\r\n      }\r\n    )\r\n\r\n    return () => {\r\n      jobStatusUnsubscribe()\r\n      taskStatusUnsubscribe()\r\n      signalRService.stop()\r\n    }\r\n  }, [queryClient])\r\n}"],"names":[],"mappings":"AAAA,sBAAsB;;;;AACtB;AACA;AACA;;;;;AAGO,SAAS;;IACd,MAAM,cAAc,CAAA,GAAA,yLAAA,CAAA,iBAAc,AAAD;IAEjC,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;gCAAE;YACR,6HAAA,CAAA,iBAAc,CAAC,KAAK;YAEpB,MAAM,uBAAuB,6HAAA,CAAA,iBAAc,CAAC,kBAAkB;6DAC5D,CAAC,OAAe;oBACd,6BAA6B;oBAC7B,YAAY,YAAY,CAAC;wBAAC;qBAAO;qEAAE,CAAC;4BAClC,IAAI,CAAC,SAAS,OAAO;4BACrB,OAAO,QAAQ,GAAG;6EAAC,CAAA,MACjB,IAAI,EAAE,KAAK,QAAQ;wCAAE,GAAG,GAAG;wCAAE;oCAAO,IAAI;;wBAE5C;;oBAEA,oCAAoC;oBACpC,YAAY,YAAY,CAAC;wBAAC;wBAAQ;qBAAM;qEAAE,CAAC;4BACzC,IAAI,CAAC,SAAS,OAAO;4BACrB,OAAO;gCAAE,GAAG,OAAO;gCAAE;4BAAO;wBAC9B;;gBACF;;YAGF,MAAM,wBAAwB,6HAAA,CAAA,iBAAc,CAAC,mBAAmB;8DAC9D,CAAC,OAAe,QAAgB;oBAC9B,0CAA0C;oBAC1C,YAAY,YAAY,CAAC;wBAAC;wBAAQ;qBAAM;sEAAE,CAAC;4BACzC,IAAI,CAAC,SAAS,OAAO;4BACrB,OAAO;gCACL,GAAG,OAAO;gCACV,OAAO,QAAQ,KAAK,CAAC,GAAG;kFAAC,CAAA,OACvB,KAAK,EAAE,KAAK,SAAS;4CAAE,GAAG,IAAI;4CAAE;wCAAO,IAAI;;4BAE/C;wBACF;;gBACF;;YAGF;wCAAO;oBACL;oBACA;oBACA,6HAAA,CAAA,iBAAc,CAAC,IAAI;gBACrB;;QACF;+BAAG;QAAC;KAAY;AAClB;GA7CgB;;QACM,yLAAA,CAAA,iBAAc","debugId":null}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":["file:///E:/jtl-taskmaster-saas/src/frontend/src/components/providers/layout-provider.tsx"],"sourcesContent":["// components/providers/layout-provider.tsx\r\n'use client'\r\n\r\nimport { useSignalR } from '@/hooks/useSignalR'\r\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\r\nimport { ReactNode } from 'react'\r\n\r\nconst queryClient = new QueryClient()\r\n\r\nexport function LayoutProvider({ children }: { children: ReactNode }) {\r\n  useSignalR()\r\n\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      {children}\r\n    </QueryClientProvider>\r\n  )\r\n}"],"names":[],"mappings":"AAAA,2CAA2C;;;;;AAG3C;AACA;AAAA;;;AAHA;;;AAMA,MAAM,cAAc,IAAI,gLAAA,CAAA,cAAW;AAE5B,SAAS,eAAe,EAAE,QAAQ,EAA2B;;IAClE,CAAA,GAAA,6HAAA,CAAA,aAAU,AAAD;IAET,qBACE,6LAAC,yLAAA,CAAA,sBAAmB;QAAC,QAAQ;kBAC1B;;;;;;AAGP;GARgB;;QACd,6HAAA,CAAA,aAAU;;;KADI","debugId":null}}]
}